// JavaScript Document

var options={
    clickable:true
};

function select(buttonId) {
    document.getElementById("hand_b").className="unselected";
    document.getElementById("shape_b").className="unselected";
    document.getElementById("radius_r").className="unselected";
    document.getElementById(buttonId).className="selected";
}

//Start of code to draw the polygon 
function stopEditing() {
    select("hand_b");
    disableDrawing();
}

function disableDrawing(){
    if (selectionpolygon!=null){
        selectionpolygon.setEditable(false);
    }
}

function startShape() {
    select("shape_b");
    clearPolygon(false);
}

function getPointsFromPolygon(poly){
    var pgpoly='';
    if (isArray(poly)){
        for (var x=0;x<poly.length;x++){
            pgpoly += getPolyPathStr(poly[x]);
        }
    }else{
        pgpoly = getPolyPathStr(poly);
    }
    return pgpoly; 
}

function getPolyPathStr(poly) {
    var pgpoly="";
    poly.getPaths().forEach(function (path,index) {
            if (index>0){pgpoly+=',';} 
            if (poly.getPaths().getLength()>1){pgpoly +='((';}
            path.forEach(function(latlng,i){
                if (latlng!=undefined){
                    pgpoly += latlng.lng() + ' ' + latlng.lat();
                    if (i<path.getLength()-1){
                        pgpoly += ',';
                    }
                }
            });
        if (poly.getPaths().getLength()>1){pgpoly +='))';}
    });
    return pgpoly;
}

function getPixelPointsFromPolygon(poly){
    var pgpoly='';
    var p = null;
    poly.getPath().forEach(function(latlng,i){
       p=getDivPixel(latlng);
        pgpoly +=p.x + ' ' + p.y; 
        if (i<poly.getPath().getLength()){
            pgpoly += ',';
        }
    });
    return pgpoly;
}

function startDrawing(poly, name, onUpdate, color) {
    map.addOverlay(poly);
    GEvent.addListener(poly, "click", function(point) {
        getPointInfo(point);
    });
    poly.enableDrawing(options);
    poly.disableEditing({
        onEvent: "mouseout"
    });
    GEvent.addListener(poly, "endline", function() {
        select("hand_b");
        GEvent.bind(poly, "lineupdated", "", onUpdate);
    });
}

//End of Polygon drawing 

function checkPolygonIsValid(polygonstr){
    $.post("pg_polygonIsValid.php",{
        polygon:polygonstr
    },function(data){
        var isok=null;
        $(data).find('polygon').each(function(){
            isok=$(this).attr("isok");
            if (isok=='t'){
                queryByPolygon(polygonstr);
            }else{
                if (selectionpolygon!=null){
                    selectionpolygon.setMap(map);;
                }
                alert('The Polygon is self intersecting and invalid.');
            }
        });
    });	
}

function queryByPolygon(polygonstr){
    if(getSelecteTab()!=2){
        //change tab if not currently on the sales tab
        $('#tabs').tabs('select', '#tabs-1');
        getPolygonSummary(polygonstr);
        getAreaBuiltUnits(polygonstr);
    }else{
        updateSalesTab();	
    }
    if($('input[name=showniludsites]').is(':checked')){
        getPolygonNiludSites(polygonstr);
    }
    showLocalSales(12);
}

function removePolyOverlay(poly){
    if(poly.constructor == Array){
        for(i=0;i<poly.length;i++){
            poly[i].setMap(null);
        }
    }else{
        poly.setMap(null);
    }
    return null;
}

function clearPolygon(reloadData){
    //clearNiludTable();
    if (selectionpolygon!=null){
        selectionpolygon = removePolyOverlay(selectionpolygon);
    }
    if (radiuspoly!=null){
        radiuspoly.setMap(null);
        radiuspoly=null;
    }
    if (reloadData){
        getInfoByMap();
    }
}

function getPolygonSummary(polygonstr){
    getAreaSalesInformation();
    $.post("pg_polygonniludsummary.php",{
        polygon:polygonstr,
        min:$('#piiSliderMin').text(),
        max:$('#piiSliderMax').text(),json:1
        },function(data){
        var tdata = new google.visualization.DataTable(data, 0.6);
        table = new google.visualization.Table(document.getElementById('areasummarytext'));
        table.draw(tdata, {
            'showRowNumber': false, 
            'allowHtml': true, 
            width:tableWidth,
            cssClassNames:{
                tableCell : 'gtd2',
                headerCell: 'gth2'
            }
        });
    });	
}

function getPolygonNiludSites(polygonstr){
    $.post("pg_polygonniludrecords.php",{
        polygon:polygonstr,
        min:$('#piiSliderMin').text(),
        max:$('#piiSliderMax').text()
        },function(data){
        getNiludSitesResults(data);
    });	
}

function getRadiusPolyPoints(poly){
    var area =(Math.round(poly.getArea() / 10000) / 100) + "km<sup>2</sup>";
    $('#summarycaption').html('Summarise by:&nbsp;&nbsp; Radius Area:' + area);
    var pgpoly=getPointsFromPolygon(poly);
    checkPolygonIsValid(pgpoly); 
}

function createBlankAreaSalesTable(){
    var tdata=null;
    tdata = new google.visualization.DataTable();
    tdata.addColumn('string', "Style");
    tdata.addColumn('number', 'For Sale');
    tdata.addColumn('number', 'Sold');
    tdata.addColumn('number', 'Agreed');
    tdata.addColumn('number', 'Total');
    tdata.addColumn('number', 'Avg. Asking');
    return tdata;
}	

function getAreaSalesInformation(polygonstr){
    var options=null;
    var pgurl=null;
    if ((radiuspoly==null) && (selectionpolygon==null)) {
        options={
            y1:map.getBounds().getSouthWest().lat(),
            x1:map.getBounds().getSouthWest().lng(),
            y2: map.getBounds().getNorthEast().lat(),
            x2:map.getBounds().getNorthEast().lng(),json:1
            };
        pgurl= "pg_getarea_sales.php";
    }else{
        if(polygonstr==null){
            if(radiuspoly==null){
                polygonstr=getPointsFromPolygon(selectionpolygon);
            }else{
                polygonstr=getPointsFromPolygon(radiuspoly);
            }
        }
        options={
            polygon:escape(polygonstr),json:1
            };
        pgurl= "pg_getarea_sales.php";		
    }
    $.post(pgurl,options,function(data){
        var tdata = new google.visualization.DataTable(data.jsontable, 0.6);

        tdata.addRows([
                ["<b>Total</b>",{v:parseInt(sumColumn(tdata,1),10),f:addCommas(sumColumn(tdata,1))},{v:parseInt(sumColumn(tdata,2),10),f:addCommas(sumColumn(tdata,2))},{v:parseInt(sumColumn(tdata,3),10),f:addCommas(sumColumn(tdata,3))},{v:parseInt(sumColumn(tdata,4),10),f:addCommas(sumColumn(tdata,4))},null]
                ]);
        table = new google.visualization.Table(document.getElementById('salessummarytable'));
        table.draw(tdata, {'showRowNumber': false, 'allowHtml': true, width:tableWidth,cssClassNames:{tableCell : 'gtd2',headerCell: 'gth2'}});
        var view = new google.visualization.DataView(tdata);
        view.setColumns([0,1,2,3]);
        view.setRows(0,tdata.getNumberOfRows()-2);
        new google.visualization.ColumnChart(document.getElementById('salessummarychart')).
        draw(view,
        {
            title:"Sales Activity by Style last 12 months",
            width:chartWidth, 
            height:320,
            vAxis: {title: "No. Properties in Area",minValue:0,logScale:false},
            hAxis: {title: "Style"},
            chartArea: {top: 30,width:340,left:50},
            colors:['#3366CC','#DC3912','#2AC749'],
            legend:'bottom',
            isStacked:true
        });
        $('#monthonmkt').text('Average Time On Market (Sold Property) ' + data.timeonmkt);
    });
return false;	

}

function polygonGetBounds(poly)
{
    var bounds = new google.maps.LatLngBounds();
    var paths = poly.getPaths();
    var path;
    for (var p = 0; p < paths.getLength(); p++) {
            path = paths.getAt(p);
            for (var i = 0; i < path.getLength(); i++) {
                    bounds.extend(path.getAt(i));
            }
    }
    return bounds;
}

function getDivPixel(ptLatLng){
    var scale = Math.pow(2, map.getZoom());
    var nw = new google.maps.LatLng(
    map.getBounds().getNorthEast().lat(),
    map.getBounds().getSouthWest().lng()
);
var worldCoordinateNW = map.getProjection().fromLatLngToPoint(nw);
var worldCoordinate = map.getProjection().fromLatLngToPoint(ptLatLng);
var pixelOffset = new google.maps.Point(
    Math.floor((worldCoordinate.x - worldCoordinateNW.x) * scale),
    Math.floor((worldCoordinate.y - worldCoordinateNW.y) * scale)
);
    return pixelOffset;
}

function isArray(obj) {
   if (obj.constructor.toString().indexOf("Array") == -1)
      return false;
   else
      return true;
}

function drawwkbfpolygon(polystr){
    if (selpolygon!=null){
        for (j=0; j<selpolygon.length; j++)  {
            //map.removeOverlay(selpolygon[j]);
            selpolygon[j].setMap(null);
        }
        selpolygon=null;
    }
    if (polystr.substring(2,0)=="(("){
        GetMultiPolygonPoints(polystr);	
    } else{
        selpolygon = new Array();
        selpolygon[0] = new google.maps.Polygon({paths:GetPolygonPoints(polystr),strokeColor:"#f00", strokeWeight:2, strokeOpacity:1,fillColor:"#fff", fillOpacity:0.4,clickable : false});
        if (selpolygon[0]!=null){
            $("#byselpoly").removeAttr("disabled");
            //map.addOverlay(selpolygon[0]);
            selpolygon[0].setMap(map);
            if($('#polyextent').is(':checked')){
                map.setCenter(selpolygon[0].getBounds().getCenter(), map.getBoundsZoomLevel(selpolygon[0].getBounds()));
            }
        }
    }
}

function drawWKTpolygon(polyStr){
    if (selectionpolygon!=null){
        selectionpolygon = removePolyOverlay(selectionpolygon);
    }
    if (polyStr.substring(2,0)=="(("){
        DrawMultiPolygon(polyStr);	
    } else{
        selectionpolygon  = new google.maps.Polygon({paths:GetPolygonPoints(polyStr),strokeColor:"#0000C2", strokeWeight:2, strokeOpacity:0.7,fillColor:"#0000C2", fillOpacity:0.4,clickable : true});
        //map.addOverlay(selectionpolygon);				
        selectionpolygon.setMap(map);
    }
    if (selectionpolygon!=null){
        if(isArray(selectionpolygon)){
            for(i=0;i<selectionpolygon.length;i++){
                google.maps.event.addListener(selectionpolygon[i], "click", function(event) {getPointInfo(event.latLng);});
            }
        }else{
            google.maps.event.addListener(selectionpolygon, "click", function(event) {getPointInfo(event.latLng);});
        }
    }
}

function DrawMultiPolygon(polygonPoints)
{ 
    var tmpPoly=null;
    var pointList = new google.maps.MVCArray();
    polygonPoints=polygonPoints.replace(/\)\),\(\(*/g,"|");
    polygonPoints=polygonPoints.replace(/\),\(*/g,"|");
    polygonPoints=polygonPoints.replace(/\(\(/g,"");
    polygonPoints=polygonPoints.replace(/\)\),*/g,"");
    //REMOVE Opening and Closing brackets
    polygons =  polygonPoints.split('|');
    if (polygons.length>0){
        tmpPoly = new Array();
        var x=0;
        var j=0;
        for (x=0; x<polygons.length; x++){
            coords = polygons[x].split(',');
            for (j=0; j<coords.length; j++)  {
                latlong=coords[j].split(' ');
                pointList.push(new google.maps.LatLng(parseFloat(latlong[1]),parseFloat(latlong[0])));
            }
            tmpPoly[x] = new google.maps.Polygon({paths:pointList,strokeColor:"#0000C2", strokeWeight:2, strokeOpacity:1,fillColor:"#0000C2", fillOpacity:0.2});
            //selectionpolygon=selpolygon[x];
            if (tmpPoly[x]!=null){
                tmpPoly[x].setMap(map);
                //map.addOverlay(tmpPoly[x]);
            }
            pointList = new Array();
        }
        selectionpolygon =tmpPoly;
    }
}

function GetMultiPolygonPoints(polygonPoints)
{ 
    var pointList = new google.maps.MVCArray();
    polygonPoints=polygonPoints.replace(/\)\),\(\(*/g,"|");
    polygonPoints=polygonPoints.replace(/\),\(*/g,"|");
    polygonPoints=polygonPoints.replace(/\(\(/g,"");
    polygonPoints=polygonPoints.replace(/\)\),*/g,"");
    //REMOVE Opening and Closing brackets
    polygonPoints=polygonPoints.substring(0,polygonPoints.length-1);
    polygons =  polygonPoints.split('|');
    if (polygons.length>0){
        selpolygon = new Array();
        var x=0;
        var j=0;
        for (x=0; x<polygons.length; x++){
            coords = polygons[x].split(',');
            for (j=0; j<coords.length; j++)  {
                latlong=coords[j].split(' ');
                pointList.push(new google.maps.LatLng(parseFloat(latlong[1]),parseFloat(latlong[0])));
            }
            selpolygon[x] = new google.maps.Polygon({ paths: pointList,strokeColor: "#FF0000",strokeOpacity: 0.8,strokeWeight: 3,fillColor: "#FF0000",fillOpacity: 0.35,clickable:true});
            google.maps.event.addListener(selpolygon[x], "click", function(event) {
                getPointInfo(event.latLng);
            });
            if (selpolygon[x]!=null){
                $("#byselpoly").removeAttr("disabled");
                //map.addOverlay(selpolygon[x]);
                selpolygon[x].setMap(map);
                if($('#polyextent').is(':checked')){
                    map.setCenter(polygonGetBounds(selpolygon[0]).getCenter(), map.fitBounds(polygonGetBounds(selpolygon[0])));
                }
            }
            pointList = new google.maps.MVCArray();
        }
    }
}

//Draw polygon from POSTGIS geometry
function GetPolygonPoints(polygonPoints)
{ 
    var pointList = new google.maps.MVCArray();
    coords = polygonPoints.split(',');
    for (j=0; j<coords.length; j++)  {
        latlong=coords[j].split(' ');
        pointList.push(new google.maps.LatLng(parseFloat(latlong[1]),parseFloat(latlong[0])));
    }
    return pointList;
}

//Draw the polygon used for polygons
function DrawPolypath(polypath,queryByPoly){
    if (polypath!=null){
        var polypoints = null;
        if (polypath.substring(1,0)=='M'){
            polypoints=polypath.substring(13,polypath.length-1);
            drawWKTpolygon(polypoints);
            if (queryByPoly===true){
                queryByPolygon(polypoints);
            }
        } else{
            polypoints=polypath.substring(9,polypath.length-2);
            drawWKTpolygon(polypoints);
            if (queryByPoly===true){
                queryByPolygon(polypoints);
            }
        }
    }
}